
@import './theme';
@import './theme-color.css';


// sass 风格的注释，不会被编译到最终的 css 文件
// 定义变量
$test-color: red;
$test-size: 25px;
$test-background: yellow;
$hover-color: green;
$theme: #666;

// 定义默认变量 在变量值后面加上 !default，表示这个变量是默认值
// 如果我们给同一个变量再次赋值，则使用最新的这个值
$default-color: #666 ;
$default-color: #888 !default;


.test {
    .one {
        background-color: yellow;
        &:hover {
            background-color: green;
        }
    }
}

.test {
    /* css 风格的注释，会被编译到最终的 css 文件 */
    color: $test-color;
    font-size: $test-size;
    background-color: $test-background;
    .one {
        // & 表示对父元素的引用
        &:hover {
            color: $hover-color;
        }
    }

    .two {
        color: $default-color;
    }
    .three {
        color: $default-color;
    }
}

// 四则运算
.test-2 {
    // 乘法
    .one-1 {
        // font-size: 15px * 2;  // 30px
        // font-size: 2px * 2px;  // 编译报错
        font-size: 2 * 2px;  // 4px
    }

    // 加法
    .two-2 {
        // 
        // font-size: 10px + 10;  // 20px
        // font-size: 10px + 10px;  // 20px
        font-size: 10 + 10;  // 20
        
    }
    // + 还可以用于连接字符串
    .two-2::before {
        // 字符串 + 字符串
        // content: "this is " + "test";  // "this is test"
        // 字符串 + 数字 
        content: "this is " + 123;  // "this is 123"
        content: this is + 123;  // this is + 123
    }

    // 减法
    .three-2 {
        // 不带单位的，结果没有单位
        // font-size: 5 - 2;  // 3
        // 只要有一个有单位，结果就有单位
        // font-size: 5px - 2;  // 3px
        font-size: 5px - 2px;  // 3px
    }

    // 除法
    .four-2 {
        // 带括号的除法被认为是进行除法操作，其余被直接转换为字符串
        // font-size: (30px / 2);  // 3px
        // font-size: 30px / 2;  // 30px / 2
        // font-size: (30 / 2);  // 15
        // 使用 +，也会进行除法操作
        font-size: 5px + 30 / 2;  // 20px
        // 使用 -，也会进行除法操作
        font-size: 5px - 30 / 2;  // -15px
    }
    // 取余数操作
    .five-2 {
        // 值与"%"之间必须要有空格，否则会被看做字符串
        // font-size: 20 % 3; // 2
        // font-size: 20px % 3;  // 2px
        // 有单位的情况下，不用空格也可以正常取余数
        // font-size: 20px%3;  // 2px
        // 没有单位，% 两侧没有空格会被认为是字符串
        font-size: 20%3;  // 20% 3
    }

    
}




// 使用 @mixin 定义一个混合——不带参数
@mixin background-setting {
    background-color: yellow;
}

// 使用 @mixin 定义一个带参数的混合
@mixin background-setting2($color, $width) {
    background-color: $color;
    width: $width;
}

// 使用 @mixin 定义一个带默认参数的混合，注意，默认参数必须放在必传参数的后面 
@mixin background-setting3($width, $color: green) {
    background-color: $color;
    width: $width;
}

// 混合中也可以使用嵌套规则
@mixin link-color($normal, $hover, $visited) {
    color: $normal;
    &:hover {
        color: $hover;
    }
    &:visited {
        color: $visited
    }
}

.test-3 {
    // 使用 @include 引入一个混合
    // @include background-setting;

    // 使用一个带参数的混合，需要按顺序传入参数
    // @include background-setting2(#666, 15px);
    //
    // @include background-setting3(20px);
    // 根据形参指定具体传入参数的位置
    @include link-color($normal: black, $hover: red, $visited: #666);
}

// 继承
.error {
    border: 1px solid red;
    background-color: #666;
}
.error a {
    &:hover {
        border: 1px solid green;   
    }
}
.seriousError {
    @extend .error;
    border-width: 2px;
}

h1.seriousError {
    @extend .error;
}

// 内置函数
/*
颜色函数
darken($color, $amount) 
颜色加深,第一个参数是颜色,第二个参数是百分比,必须介于 0% 到 100%,通过减少 $color 的 HSL 亮度实现对颜色的加深

lighten($color, $amount)
颜色变浅,第一个参数是颜色,第二个参数是百分比,必须介于 0% 到 100%,通过增加 $color 的 HSL 亮度实现使得颜色的变浅

greyscale($color)
获得与 $color 相同亮度的灰度值
例如:grayscale(#6b717f); // #757575
opacify($color, $amount)
让一个颜色变得更加透明，$amount 必须是介于 0 到 1 之间的数字，减少 $color 的 alpha 通道实现让颜色变得透明
red() 获取一个颜色的 red 通道
blue() 获取一个颜色的 blue 通道

list 函数
map 函数
math 函数
*/

// 高级指令

// @if / @else
//$num: 10;
$num: 4;
@if $num > 5 {
    .test-4 {
        background-color: #ff5544;
    }
} @else {
    .test-4 {
        background-color: #ccc;
    }
}

// @for
@for $i from 1 to 3 {
    border-#{$i} {
        border: 1px solid red;
    }
}

// @while
$num2: 3;
@while $num2 > 0 {
    .item-#{$num2} {
        width: 2em * $num2;
    }
    $num2: $num2 - 1
}

// @each
// 遍历 list 和 map

// 定义一个 list，以 , 分隔的多个值
$member: a, b, c, d;
@each $item in $member {
    .#{$item} {
        background-image: url('./img/#{$item}.jpg');
    }
}

// 定义一个 map，形式是：(key1: value1, key2: value2)
$font-size-map: (large: 10px, medium: 6px, small: 3px);
@each $size, $num in $font-size-map {
    .test-#{$size} {
        font-size: $num;
    }
}

// @function 和 @return
@function double($size) {
    @return $size * 2;
}

.test-5 {
    width: double(10px);
    color: hsl(90, 64%, 50%);
}

